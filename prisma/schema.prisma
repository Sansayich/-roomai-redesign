generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String            @id @default(cuid())
  name              String?
  email             String?           @unique
  emailVerified     DateTime?
  image             String?
  credits           Int               @default(3)
  utmSource         String?
  utmMedium         String?
  utmCampaign       String?
  utmContent        String?
  utmTerm           String?
  
  // Реферальная программа
  referralCode      String?           @unique // Уникальный реферальный код
  referredById      String?           // ID пригласившего пользователя
  referralBalance   Float             @default(0) // Баланс для выплаты (в рублях)
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  accounts          Account[]
  sessions          Session[]
  generations       Generation[]
  
  // Реферальные связи
  referredBy        User?             @relation("Referrals", fields: [referredById], references: [id], onDelete: SetNull)
  referrals         User[]            @relation("Referrals")
  earnings          ReferralEarning[]
  payoutRequests    PayoutRequest[]
  payments          Payment[]
  
  @@index([referralCode])
  @@index([referredById])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Generation {
  id                  String   @id @default(cuid())
  userId              String
  originalImageUrl    String   @db.Text
  generatedImages     String[] @db.Text
  style               String
  roomType            String
  quality             String
  creditsUsed         Int
  createdAt           DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model Promo {
  id                String    @id @default(cuid())
  code              String    @unique
  discountPercent   Int?      // Скидка в процентах (10, 20, 50)
  discountAmount    Int?      // Фиксированная скидка в рублях
  usageLimit        Int?      // Лимит использований (null = неограниченно)
  usageCount        Int       @default(0)
  expiresAt         DateTime? // Дата истечения (null = бессрочно)
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([code])
}

// Начисления от рефералов
model ReferralEarning {
  id              String   @id @default(cuid())
  userId          String   // Кому начислено
  referralId      String   // Кто совершил платеж
  referralEmail   String?  // Email реферала (для отслеживания возвратов)
  amount          Float    // Сумма начисления (в рублях)
  orderAmount     Float    // Сумма заказа реферала
  percentage      Float    // Процент (обычно 40)
  availableAt     DateTime // Дата когда средства станут доступны (createdAt + 14 дней)
  isReversed      Boolean  @default(false) // Был ли возврат
  createdAt       DateTime @default(now())
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([referralId])
  @@index([availableAt])
  @@index([createdAt])
}

// Запросы на выплату
model PayoutRequest {
  id              String   @id @default(cuid())
  userId          String
  amount          Float    // Запрошенная сумма
  status          String   @default("pending") // pending, paid, rejected
  createdAt       DateTime @default(now())
  processedAt     DateTime?
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

// Платежи
model Payment {
  id              String   @id @default(cuid())
  userId          String
  amount          Float    // Сумма платежа в рублях
  credits         Int      // Количество кредитов
  status          String   @default("pending") // pending, succeeded, failed, canceled
  paymentMethod   String?  // Способ оплаты (card, sbp, etc.)
  paymentId       String?  // ID платежа в платежной системе
  paymentUrl      String?  @db.Text // URL для оплаты
  description     String?  // Описание платежа
  promoCode       String?  // Использованный промокод
  discountAmount  Float?   // Размер скидки
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  paidAt          DateTime?
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@index([paymentId])
  @@index([createdAt])
}

