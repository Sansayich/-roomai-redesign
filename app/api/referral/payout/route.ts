import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/prisma'
import nodemailer from 'nodemailer'

export const dynamic = 'force-dynamic'

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST,
  port: parseInt(process.env.SMTP_PORT || '465'),
  secure: true,
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASSWORD,
  },
})

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)

    if (!session?.user?.id) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { id: session.user.id },
      select: {
        id: true,
        email: true,
        name: true,
        referralBalance: true,
        referralCode: true,
      }
    })

    if (!user) {
      return NextResponse.json(
        { error: 'User not found' },
        { status: 404 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 —Ä—É–±–ª–µ–π)
    const MIN_PAYOUT_AMOUNT = 100

    if (user.referralBalance < MIN_PAYOUT_AMOUNT) {
      return NextResponse.json(
        { error: `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: ${MIN_PAYOUT_AMOUNT}‚ÇΩ` },
        { status: 400 }
      )
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É
    const payoutRequest = await prisma.payoutRequest.create({
      data: {
        userId: user.id,
        amount: user.referralBalance,
        status: 'pending',
      }
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    const emailHtml = `
      <h2>üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è</h2>
      
      <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</h3>
      <ul>
        <li><strong>ID:</strong> ${user.id}</li>
        <li><strong>Email:</strong> ${user.email}</li>
        <li><strong>–ò–º—è:</strong> ${user.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</li>
        <li><strong>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:</strong> ${user.referralCode}</li>
      </ul>
      
      <h3>–î–µ—Ç–∞–ª–∏ –≤—ã–ø–ª–∞—Ç—ã:</h3>
      <ul>
        <li><strong>–°—É–º–º–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ:</strong> ${user.referralBalance.toFixed(2)}‚ÇΩ</li>
        <li><strong>ID –∑–∞–ø—Ä–æ—Å–∞:</strong> ${payoutRequest.id}</li>
        <li><strong>–î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞:</strong> ${new Date().toLocaleString('ru-RU')}</li>
      </ul>
      
      <p>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <a href="${process.env.NEXTAUTH_URL}/admin">–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</a> –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.</p>
    `

    try {
      await transporter.sendMail({
        from: process.env.SMTP_FROM,
        to: 'hello@room-gpt.ru',
        subject: `üí∞ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –æ—Ç ${user.email}`,
        html: emailHtml,
      })
    } catch (emailError) {
      console.error('Error sending email:', emailError)
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è
    }

    return NextResponse.json({ 
      success: true,
      message: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
      requestId: payoutRequest.id
    })
  } catch (error) {
    console.error('Error creating payout request:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

