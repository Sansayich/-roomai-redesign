'use client'

import { signIn } from 'next-auth/react'
import { useState, useEffect, Suspense } from 'react'
import { useSearchParams } from 'next/navigation'
import Link from 'next/link'

function SignInForm() {
  const searchParams = useSearchParams()
  const [email, setEmail] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [isEmailSent, setIsEmailSent] = useState(false)

  // –ò–∑–≤–ª–µ–∫–∞–µ–º UTM –º–µ—Ç–∫–∏ –∏–∑ URL
  const utmSource = searchParams.get('utm_source')
  const utmMedium = searchParams.get('utm_medium')
  const utmCampaign = searchParams.get('utm_campaign')
  const utmContent = searchParams.get('utm_content')
  const utmTerm = searchParams.get('utm_term')
  const referralCode = searchParams.get('ref') // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥

  const handleEmailSignIn = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º UTM –º–µ—Ç–∫–∏ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
      if (utmSource || utmMedium || utmCampaign || utmContent || utmTerm || referralCode) {
        await fetch('/api/auth/save-utm', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            email,
            utmSource,
            utmMedium,
            utmCampaign,
            utmContent,
            utmTerm,
            referralCode,
          }),
        })
      }

      const result = await signIn('email', {
        email,
        redirect: false,
        callbackUrl: '/generate',
      })
      
      if (result?.ok) {
        setIsEmailSent(true)
      }
    } catch (error) {
      console.error('Sign in error:', error)
    } finally {
      setIsLoading(false)
    }
  }


  if (isEmailSent) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center p-4">
        <div className="max-w-md w-full bg-gray-50 rounded-xl border border-gray-200 p-8 text-center">
          <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg className="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
          </div>
          <h2 className="text-2xl font-bold text-gray-900 mb-2">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É</h2>
          <p className="text-gray-600 mb-6">
            –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ <strong>{email}</strong>
          </p>
          <p className="text-sm text-gray-500">
            –ü–∏—Å—å–º–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É "–°–ø–∞–º", –µ—Å–ª–∏ –Ω–µ –≤–∏–¥–∏—Ç–µ –ø–∏—Å—å–º–æ.
          </p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-white">
      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      <nav className="w-full px-4 sm:px-6 py-4 sm:py-5 border-b border-gray-200">
        <div className="max-w-7xl mx-auto flex justify-between items-center">
          <Link href="/" className="text-xl sm:text-2xl font-bold text-blue-600">
            roomGPT
          </Link>
          <div className="flex items-center gap-3 sm:gap-6">
            <Link href="/pricing" className="text-sm sm:text-base text-gray-700 hover:text-gray-900">
              –¢–∞—Ä–∏—Ñ—ã
            </Link>
          </div>
        </div>
      </nav>

      <div className="flex items-center justify-center p-4 py-12">
        <div className="max-w-lg w-full">
        {/* Badge —Å–≤–µ—Ä—Ö—É */}
        <div className="text-center mb-8">
          <div className="inline-flex items-center px-4 py-2 bg-white rounded-full border border-blue-200  mb-6">
            <span className="text-sm text-gray-700">
              –ë–æ–ª–µ–µ <span className="font-bold text-blue-600">10,000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</span> —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç roomGPT
            </span>
          </div>
        </div>

        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-8">
          <Link href="/" className="text-4xl font-bold text-blue-600 inline-block mb-4">
            roomGPT
          </Link>
          <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
            –†–µ–¥–∏–∑–∞–π–Ω –≤–∞—à–µ–π <span className="text-blue-600">–∫–æ–º–Ω–∞—Ç—ã</span> –∑–∞ —Å–µ–∫—É–Ω–¥—ã
          </h1>
          <p className="text-base sm:text-lg text-gray-600 mb-2 px-2">
            –í–æ–π–¥–∏—Ç–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏ —Å–¥–µ–ª–∞—Ç—å —Ä–µ–¥–∏–∑–∞–π–Ω –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.
          </p>
          <p className="text-base sm:text-lg font-semibold text-gray-900">
            –í—ã –ø–æ–ª—É—á–∏—Ç–µ <span className="text-blue-600">3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–∞</span> üéÅ
          </p>
        </div>

        {/* –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ */}
        <div className="bg-white rounded-2xl border border-gray-200  p-8">
          <form onSubmit={handleEmailSignIn} className="space-y-5">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
                Email –∞–¥—Ä–µ—Å
              </label>
              <input
                id="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="your@email.com"
                required
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition text-gray-900"
              />
            </div>

            <button
              type="submit"
              disabled={isLoading}
              className="w-full bg-blue-600 text-white py-3.5 rounded-lg font-semibold hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed "
            >
              {isLoading ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É...' : '–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞'}
            </button>
          </form>

          {/* –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ */}
          <div className="mt-6 pt-6 border-t border-gray-200 space-y-3">
            <div className="flex items-start gap-3">
              <svg className="w-5 h-5 text-green-500 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
              </svg>
              <span className="text-sm text-gray-600">–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ VPN –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–§</span>
            </div>
            <div className="flex items-start gap-3">
              <svg className="w-5 h-5 text-green-500 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
              </svg>
              <span className="text-sm text-gray-600">–û–ø–ª–∞—Ç–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏</span>
            </div>
            <div className="flex items-start gap-3">
              <svg className="w-5 h-5 text-green-500 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
              </svg>
              <span className="text-sm text-gray-600">–ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ</span>
            </div>
          </div>
        </div>

          <p className="text-center text-sm text-gray-500 mt-6">
            –ü—Ä–æ–¥–æ–ª–∂–∞—è, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å{' '}
            <Link href="/terms" className="text-blue-600 hover:underline">
              —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            </Link>
            {' '}–∏{' '}
            <Link href="/privacy" className="text-blue-600 hover:underline">
              –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            </Link>
          </p>
        </div>
      </div>

      {/* –§—É—Ç–µ—Ä */}
      <footer className="w-full py-6 sm:py-8 border-t border-gray-200 mt-8">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 text-center text-gray-500 text-xs sm:text-sm space-y-3">
          <div className="flex flex-wrap justify-center gap-3 sm:gap-6">
            <Link href="/terms" className="hover:text-gray-900">–ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞</Link>
            <Link href="/privacy" className="hover:text-gray-900">–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</Link>
            <Link href="/refund" className="hover:text-gray-900">–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤</Link>
            <Link href="/referral" className="hover:text-gray-900">–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</Link>
          </div>
          <div className="flex justify-center items-center gap-2">
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
            </svg>
            <a href="mailto:hello@room-gpt.ru" className="hover:text-gray-900">hello@room-gpt.ru</a>
          </div>
          <p>¬© {new Date().getFullYear()} roomGPT. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
        </div>
      </footer>
    </div>
  )
}

export default function SignIn() {
  return (
    <Suspense fallback={
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-purple-200 border-t-purple-600 rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    }>
      <SignInForm />
    </Suspense>
  )
}

