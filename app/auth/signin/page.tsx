'use client'

import { signIn } from 'next-auth/react'
import { useState, useEffect, Suspense } from 'react'
import { useSearchParams } from 'next/navigation'
import Link from 'next/link'
import Footer from '@/components/Footer'

function SignInForm() {
  const searchParams = useSearchParams()
  const [email, setEmail] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [isEmailSent, setIsEmailSent] = useState(false)

  // –ò–∑–≤–ª–µ–∫–∞–µ–º UTM –º–µ—Ç–∫–∏ –∏–∑ URL –∏–ª–∏ –∏–∑ localStorage
  let utmSource = searchParams.get('utm_source')
  let utmMedium = searchParams.get('utm_medium')
  let utmCampaign = searchParams.get('utm_campaign')
  let utmContent = searchParams.get('utm_content')
  let utmTerm = searchParams.get('utm_term')
  let referralCode = searchParams.get('ref')
  
  // –ï—Å–ª–∏ –≤ URL –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
  if (!utmSource && !utmMedium && !utmCampaign && !utmContent && !utmTerm && !referralCode) {
    try {
      const savedUtmData = localStorage.getItem('utm_data')
      if (savedUtmData) {
        const utmData = JSON.parse(savedUtmData)
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
        if (Date.now() - utmData.timestamp < 7 * 24 * 60 * 60 * 1000) {
          utmSource = utmData.utmSource
          utmMedium = utmData.utmMedium
          utmCampaign = utmData.utmCampaign
          utmContent = utmData.utmContent
          utmTerm = utmData.utmTerm
          referralCode = utmData.ref
          console.log('üìä Loaded UTM data from localStorage:', utmData)
        } else {
          // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ
          localStorage.removeItem('utm_data')
        }
      }
    } catch (e) {
      console.error('Error reading utm_data from localStorage:', e)
    }
  }

  const handleEmailSignIn = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    
    try {
      // –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º UTM –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º email
      if (utmSource || utmMedium || utmCampaign || utmContent || utmTerm || referralCode) {
        console.log('üì§ Sending UTM data to API for email:', email)
        try {
          const response = await fetch('/api/auth/save-utm', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              email,
              utmSource,
              utmMedium,
              utmCampaign,
              utmContent,
              utmTerm,
              referralCode,
            }),
          })
          console.log('üì• UTM API response:', response.status, await response.text())
        } catch (utmError) {
          console.error('UTM save error:', utmError)
        }
      }

      // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥
      const result = await signIn('email', {
        email,
        redirect: false,
        callbackUrl: '/generate',
      })
      
      if (result?.ok) {
        setIsEmailSent(true)
      }
    } catch (error) {
      console.error('Sign in error:', error)
    } finally {
      setIsLoading(false)
    }
  }


  if (isEmailSent) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center p-4">
        <div className="max-w-md w-full bg-gray-50 rounded-xl border border-gray-200 p-8 text-center">
          <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg className="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
          </div>
          <h2 className="text-2xl font-bold text-gray-900 mb-2">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É</h2>
          <p className="text-gray-600 mb-6">
            –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ <strong>{email}</strong>
          </p>
          <p className="text-sm text-gray-500">
            –ü–∏—Å—å–º–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É "–°–ø–∞–º", –µ—Å–ª–∏ –Ω–µ –≤–∏–¥–∏—Ç–µ –ø–∏—Å—å–º–æ.
          </p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-white">
      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      <nav className="w-full px-4 sm:px-6 py-4 sm:py-5 border-b border-gray-200">
        <div className="max-w-7xl mx-auto flex justify-between items-center">
          <Link href="/" className="text-xl sm:text-2xl font-bold text-blue-600">
            roomGPT
          </Link>
          <div className="flex items-center gap-3 sm:gap-6">
            <Link href="/pricing" className="text-sm sm:text-base text-gray-700 hover:text-gray-900">
              –¢–∞—Ä–∏—Ñ—ã
            </Link>
          </div>
        </div>
      </nav>

      <div className="flex items-center justify-center p-4 py-12">
        <div className="max-w-lg w-full">
        {/* Badge —Å–≤–µ—Ä—Ö—É */}
        <div className="text-center mb-8">
          <div className="inline-flex items-center px-4 py-2 bg-white rounded-full border border-blue-200  mb-6">
            <span className="text-sm text-gray-700">
              –ë–æ–ª–µ–µ <span className="font-bold text-blue-600">10,000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</span> —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç roomGPT
            </span>
          </div>
        </div>

        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-8">
          <Link href="/" className="text-4xl font-bold text-blue-600 inline-block mb-4">
            roomGPT
          </Link>
          <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
            –†–µ–¥–∏–∑–∞–π–Ω –≤–∞—à–µ–π <span className="text-blue-600">–∫–æ–º–Ω–∞—Ç—ã</span> –∑–∞ —Å–µ–∫—É–Ω–¥—ã
          </h1>
          <p className="text-base sm:text-lg text-gray-600 mb-2 px-2">
            –í–æ–π–¥–∏—Ç–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏ —Å–¥–µ–ª–∞—Ç—å —Ä–µ–¥–∏–∑–∞–π–Ω –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.
          </p>
          <p className="text-base sm:text-lg font-semibold text-gray-900">
            –í—ã –ø–æ–ª—É—á–∏—Ç–µ <span className="text-blue-600">4 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–∞</span> üéÅ
          </p>
        </div>

        {/* –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ */}
        <div className="bg-white rounded-2xl border border-gray-200  p-8">
          <form onSubmit={handleEmailSignIn} className="space-y-5">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
                Email –∞–¥—Ä–µ—Å
              </label>
              <input
                id="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="your@email.com"
                required
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition text-gray-900"
              />
            </div>

            <button
              type="submit"
              disabled={isLoading}
              className="w-full bg-blue-600 text-white py-3.5 rounded-lg font-semibold hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed "
            >
              {isLoading ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É...' : '–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞'}
            </button>
          </form>

          {/* –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ */}
          <div className="mt-6 pt-6 border-t border-gray-200 space-y-3">
            <div className="flex items-start gap-3">
              <svg className="w-5 h-5 text-green-500 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
              </svg>
              <span className="text-sm text-gray-600">–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ VPN –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–§</span>
            </div>
            <div className="flex items-start gap-3">
              <svg className="w-5 h-5 text-green-500 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
              </svg>
              <span className="text-sm text-gray-600">–û–ø–ª–∞—Ç–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏</span>
            </div>
            <div className="flex items-start gap-3">
              <svg className="w-5 h-5 text-green-500 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
              </svg>
              <span className="text-sm text-gray-600">–ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ</span>
            </div>
          </div>
        </div>

          <div className="text-center text-sm text-gray-500 mt-6 space-y-2">
            <p>
              –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞", –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å{' '}
              <Link href="/terms" className="text-blue-600 hover:underline">
                –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç–æ–π
              </Link>
              ,{' '}
              <Link href="/privacy" className="text-blue-600 hover:underline">
                –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
              </Link>
              {' '}–∏ –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
            </p>
          </div>
        </div>
      </div>

      <Footer />
    </div>
  )
}

export default function SignIn() {
  return (
    <Suspense fallback={
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-purple-200 border-t-purple-600 rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    }>
      <SignInForm />
    </Suspense>
  )
}

